/* Simple mode for MASM
 * TODO insert conditionals, fix labels, identifiers and numbers, maybe switch to non simple
 */

(function (mod) {
  if (typeof exports == "object" && typeof module == "object")
    // CommonJS
    mod(require("codemirror/lib/codemirror.js"));
  else if (typeof define == "function" && define.amd)
    // AMD
    define(["codemirror/lib/codemirror.js"], mod);
  // Plain browser env
  else mod(CodeMirror);
})(function (CodeMirror) {
  "use strict";

  CodeMirror.defineSimpleMode("MASM", {
    // The start state contains the rules that are initially used
    start: [
      // String
      { regex: /"(?:[^\\]|\\.)*?(?:"|$)(,0)?/, token: "string" },
      {
        //Labels:
        regex: /(?!\s*)[@a-z_$?][@a-z0-9_$?]*:(?![a-z|0-9])/i,
        sol: true,
        token: "variable-2",
      },
      //{
      //  //identifiers
      //  regex: /[@a-z_$?][@a-z0-9_$?]*/i,
      //  regex: "variable-2",
      //},
      {
        //Registers
        regex: /(\s+|\,)(AX|BX|CX|DX|SI|DI|BP|SP|CS|DS|SS|ES|FS|GS|AH|BH|CH|DH|AL|BL|CL|DL|EAX|EBX|ECX|EDX|ESI|EDI|EBP|ESP|CR0|CR2|CR3|CR4|DR0|DR1|DR2|DR3|DR6|DR7|TR3|TR4|TR5|TR6|TR7|ST([0-7])|RAX|RBX|RCX|RDX|RSI|RDI|RBP|RSP|R8|R9|R10|R11|R12|R13|R14|R15|R8D|R9D|R10D|R11D|R12D|R13D|R14D|R15D|R8W|R9W|R10W|R11W|R12W|R13W|R14W|R15W|R8B|R9B|R10B|R11B|R12B|R13B|R14B|R15B)(?![a-z|0-9])/i,
        token: "variable",
      },
      {
        regex: /(AX|BX|CX|DX|SI|DI|BP|SP|CS|DS|SS|ES|FS|GS|AH|BH|CH|DH|AL|BL|CL|DL|EAX|EBX|ECX|EDX|ESI|EDI|EBP|ESP|CR0|CR2|CR3|CR4|DR0|DR1|DR2|DR3|DR6|DR7|TR3|TR4|TR5|TR6|TR7|ST([0-7])|RAX|RBX|RCX|RDX|RSI|RDI|RBP|RSP|R8|R9|R10|R11|R12|R13|R14|R15|R8D|R9D|R10D|R11D|R12D|R13D|R14D|R15D|R8W|R9W|R10W|R11W|R12W|R13W|R14W|R15W|R8B|R9B|R10B|R11B|R12B|R13B|R14B|R15B)/i,
        sol: true,
        token: "variable",
      },
      //Directives
      {
        regex: /(\.8086|\.8087|\.NO87|\.186|\.286|\.286C|\.286P|\.287|\.386|\.386C|\.386P|\.387|\.486|\.486P|\.586|\.586P|\.686|\.686P|\.K3D|\.MMX|\.XMM|\.ALPHA|\.DOSSEG|\.SEQ|\.CODE|\.CONST|\.DATA|\.DATA?|\.EXIT|\.FARDATA|\.FARDATA?|\.MODEL|\.STACK|\.STARTUP|\.IF|\.ELSE|\.ELSEIF|\.ENDIF|\.REPEAT|\.UNTIL|\.UNTILCXZ|\.WHILE|\.ENDW|\.BREAK|\.CONTINUE|\.ERR|\.ERR1|\.ERR2|\.ERRB|\.ERRDEF|\.ERRDIF|\.ERRDIFI|\.ERRE|\.ERRIDN|\.ERRIDNI|\.ERRNB|\.ERRNDEF|\.ERRNZ|\.LALL|\.SALL|\.XALL|\.LFCOND|\.SFCOND|\.TFCOND|\.CREF|\.NOCREF|\.XCREF|\.LIST|\.NOLIST|\.XLIST|\.LISTALL|\.LISTIF|\.NOLISTIF|\.LISTMACRO|\.NOLISTMACRO|\.LISTMACROALL|\.FPO|\.RADIX|\.SAFESEH)(?![a-z|0-9])/i,
        token: "tag",
      },
      { regex: /;.*/, token: "comment" },
      {
        regex: /(TINY|SMALL|COMPACT|MEDIUM|LARGE|HUGE|NEARSTACK|FARSTACK|PUBLIC|PRIVATE|STACK|COMMON|MEMORY|AT|BYTE|WORD|DWORD|PARA|PAGE|USE16|USE32|FLAT|INFO|READ|WRITE|EXECUTE|SHARED|NOPAGE|NOCACHE|DISCARD|READONLY|USES|FRAME|CASEMAP|DOTNAME|NODOTNAME|EMULATOR|NOEMULATOR|EPILOGUE|EXPR16|EXPR32|LANGUAGE|LJMP|NOLJMP|M510|NOM510|NOKEYWORD|NOSIGNEXTEND|OFFSET|OLDMACROS|NOOLDMACROS|OLDSTRUCTS|NOOLDSTRUCTS|PROC|PROLOGUE|READONLY|NOREADONLY|SCOPED|NOSCOPED|SEGMENT|SETIF2|ABS|ALL|ASSUMES|CPU|ERROR|EXPORT|FORCEFRAME|LISTING|LOADDS|NONE|NONUNIQUE|NOTHING|OS_DOS|RADIX|REQ|STDCALL|SYSCALL|C|BASIC|FORTRAN|PASCAL|PTR|NEAR|FAR|NEAR16|FAR16|NEAR32|FAR32|REAL4|REAL8|REAL10|BYTE|SBYTE|TBYTE|WORD|DWORD|QWORD|FWORD|SWORD|SDWORD|AND|NOT|OR|SHL|SHR|XOR|MOD|DUP|EQ|GE|GT|LE|LT|NE|LROFFSET|SEG|LENGTH|LENGTHOF|SIZE|SIZEOF|CODEPTR|DATAPTR|FAR|NEAR|SHORT|THIS|TYPE|HIGH|HIGHWORD|LOW|LOWWORD|OPATTR|MASK|WIDTH)(?![a-z|0-9])/i,
        sol: true,
        token: "type",
      },
      {
        regex: /(\s+)(TINY|SMALL|COMPACT|MEDIUM|LARGE|HUGE|NEARSTACK|FARSTACK|PUBLIC|PRIVATE|STACK|COMMON|MEMORY|AT|BYTE|WORD|DWORD|PARA|PAGE|USE16|USE32|FLAT|INFO|READ|WRITE|EXECUTE|SHARED|NOPAGE|NOCACHE|DISCARD|READONLY|USES|FRAME|CASEMAP|DOTNAME|NODOTNAME|EMULATOR|NOEMULATOR|EPILOGUE|EXPR16|EXPR32|LANGUAGE|LJMP|NOLJMP|M510|NOM510|NOKEYWORD|NOSIGNEXTEND|OFFSET|OLDMACROS|NOOLDMACROS|OLDSTRUCTS|NOOLDSTRUCTS|PROC|PROLOGUE|READONLY|NOREADONLY|SCOPED|NOSCOPED|SEGMENT|SETIF2|ABS|ALL|ASSUMES|CPU|ERROR|EXPORT|FORCEFRAME|LISTING|LOADDS|NONE|NONUNIQUE|NOTHING|OS_DOS|RADIX|REQ|STDCALL|SYSCALL|C|BASIC|FORTRAN|PASCAL|PTR|NEAR|FAR|NEAR16|FAR16|NEAR32|FAR32|REAL4|REAL8|REAL10|BYTE|SBYTE|TBYTE|WORD|DWORD|QWORD|FWORD|SWORD|SDWORD|AND|NOT|OR|SHL|SHR|XOR|MOD|DUP|EQ|GE|GT|LE|LT|NE|LROFFSET|SEG|LENGTH|LENGTHOF|SIZE|SIZEOF|CODEPTR|DATAPTR|FAR|NEAR|SHORT|THIS|TYPE|HIGH|HIGHWORD|LOW|LOWWORD|OPATTR|MASK|WIDTH)(?![a-z|0-9])/i,
        token: "type",
      },
      //Type/Options
      {
        regex: /(\s+)(ALIAS|ASSUME|CATSTR|COMM|DB|DD|DF|DOSSEG|DQ|DT|DW|ECHO|ELSEIF|ELSEIF1|ELSEIF2|ELSEIFB|ELSEIFDEF|ELSEIFDIF|ELSEIFDIFI|ELSEIFE|ELSEIFIDN|ELSEIFIDNI|ELSEIFNB|ELSEIFNDEF|ENDIF|ELSE|ENDM|ENDP|ENDS|END|EQU|EVEN|EXITM|EXTERN|EXTERNDEF|EXTRN|FOR|FORC|GOTO|GROUP|IF1|IF2|IFB|IFDEF|IFDIF|IFDIFI|IFE|IFIDN|IFIDNI|IFNB|IFNDEF|IF|INCLUDELIB|INCLUDE|INSTR|INVOKE|IRP|IRPC|LABEL|LOCAL|MACRO|NAME|OPTION|ORG|PAGE|POPCONTEXT|PROC|PROTO|PUBLIC|PURGE|PUSHCONTEXT|RECORD|REPEAT|REPT|SEGMENT|SIZESTR|STRUC|STRUCT|SUBSTR|SUBTITLE|SUBTTL|TEXTEQU|TITLE|TYPEDEF|UNION|WHILE)(?![a-z|0-9])/i,
        token: "variable-3",
      },
      {
        regex: /(ALIAS|ASSUME|CATSTR|COMM|DB|DD|DF|DOSSEG|DQ|DT|DW|ECHO|ELSEIF|ELSEIF1|ELSEIF2|ELSEIFB|ELSEIFDEF|ELSEIFDIF|ELSEIFDIFI|ELSEIFE|ELSEIFIDN|ELSEIFIDNI|ELSEIFNB|ELSEIFNDEF|ELSE|ENDIF|ENDM|ENDP|ENDS|END|EQU|EVEN|EXITM|EXTERNDEF|EXTERN|EXTRN|FOR|FORC|GOTO|GROUP|IF1|IF2|IFB|IFDEF|IFDIF|IFDIFI|IFE|IFIDN|IFIDNI|IFNB|IFNDEF|IF|INCLUDELIB|INCLUDE|INSTR|INVOKE|IRP|IRPC|LABEL|LOCAL|MACRO|NAME|OPTION|ORG|PAGE|POPCONTEXT|PROC|PROTO|PUBLIC|PURGE|PUSHCONTEXT|RECORD|REPEAT|REPT|SEGMENT|SIZESTR|STRUC|STRUCT|SUBSTR|SUBTITLE|SUBTTL|TEXTEQU|TITLE|TYPEDEF|UNION|WHILE)(?![a-z|0-9])/i,
        sol: true,
        token: "variable-3",
      },
      //macros
      {
        regex: /(SYSEXIT|SYSENTER|RDTSC|RDPMC|WRMSR|RDMSR|RSM|UD2|CPUID|CMPXCHG8B|VZEROUPPER|VZEROALL|VPERM2F128|VPERMILPD|VPERMILPS|VMASKMOVPD|VMASKMOVPS|VEXTRACTF128|VINSERTF128|VBROADCASTF128|VBROADCASTSD|VBROADCASTSS|PCLMULQDQ|AESIMC|AESKEYGENASSIST|AESDECLAST|AESDEC|AESENCLAST|AESENC|LZCNT|POPCNT|CRC32|PCMPGTQ|PCMPISTRM|PCMPISTRI|PCMPESTRM|PCMPESTRI|MOVNTDQA|PACKUSDW|PCMPEQQ|PTEST|PMOVZXDQ|PMOVSXDQ|PMOVZXWQ|PMOVSXWQ|PMOVZXWD|PMOVSXWD|PMOVZXBQ|PMOVSXBQ|PMOVZXBD|PMOVSXBD|PMOVZXBW|PMOVSXBW|PEXTRQ|PEXTRD|PEXTRB|EXTRACTPS|PINSRQ|PINSRD|PINSRB|INSERTPS|ROUNDSD|ROUNDPD|ROUNDSS|ROUNDPS|PMAXUD|PMINUD|PMAXUW|PMINUW|PMAXSD|PMINSD|PMAXSB|PMINSB|PBLENDW|PBLENDVB|BLENDVPD|BLENDVPS|BLENDPD|BLENDPS|DPPD|DPPS|PMULLD|PMULDQ|PHMINPOSUW|MPSADBW|PHADDSW|PHADDD|PHADDW|PHSUBSW|PHSUBD|PHSUBW|PMADDUBSW|PMULHRSW|PSHUFB|PALIGNR|PABSD|PABSW|PABSB|PSIGND|PSIGNW|PSIGNB|MWAIT|MONITOR|MOVDDUP|MOVSLDUP|MOVSHDUP|HSUBPD|HADDPD|HSUBPS|HADDPS|ADDSUBPD|ADDSUBPS|LDDQU|FISTTP|MOVNTI|MOVNTDQ|MOVNTPD|MASKMOVDQU|PAUSE|MFENCE|LFENCE|CLFLUSH|PUNPCKLQDQ|PUNPCKHQDQ|PSRLDQ|PSLLDQ|PSHUFD|PSHUFHW|PSHUFLW|PSUBQ|PADDQ|PMULUDQ|MOVDQ2Q|MOVQ2DQ|MOVDQU|MOVDQA|CVTTPS2DQ|CVTPS2DQ|CVTDQ2PS|CVTSI2SD|CVTTSD2SI|CVTSD2SI|CVTSD2SS|CVTSS2SD|CVTPD2PS|CVTPS2PD|CVTDQ2PD|CVTTPD2DQ|CVTPD2DQ|CVTPI2PD|CVTTPD2PI|CVTPD2PI|UNPCKLPD|UNPCKHPD|SHUFPD|UCOMISD|COMISD|CMPSD|CMPPD|XORPD|ORPD|ANDNPD|ANDPD|MINSD|MINPD|MAXSD|MAXPD|SQRTSD|SQRTPD|DIVSD|DIVPD|MULSD|MULPD|SUBSD|SUBPD|ADDSD|ADDPD|MOVSD|MOVMSKPD|MOVLPD|MOVHPD|MOVUPD|MOVAPD|PREFETCHNTA|PREFETCHT2|PREFETCHT1|PREFETCHT0|SFENCE|MOVNTPS|MOVNTQ|MASKMOVQ|PSHUFW|PSADBW|PMULHUW|PMOVMSKB|PMINSW|PMINUB|PMAXSW|PMAXUB|PINSRW|PEXTRW|PAVGW|PAVGB|STMXCSR|LDMXCSR|CVTTSS2SI|CVTSS2SI|CVTTPS2PI|CVTPS2PI|CVTSI2SS|CVTPI2PS|UNPCKLPS|UNPCKHPS|SHUFPS|XORPS|ORPS|ANDNPS|ANDPS|UCOMISS|COMISS|CMPSS|CMPPS|MINSS|MINPS|MAXSS|MAXPS|RSQRTSS|RSQRTPS|SQRTSS|SQRTPS|RCPSS|RCPPS|DIVSS|DIVPS|MULSS|MULPS|SUBSS|SUBPS|ADDSS|ADDPS|MOVSS|MOVMSKPS|MOVLHPS|MOVLPS|MOVHLPS|MOVHPS|MOVUPS|MOVAPS|EMMS|PSRAD|PSRAW|PSRLQ|PSRLD|PSRLW|PSLLQ|PSLLD|PSLLW|PXOR|POR|PANDN|PAND|PCMPGTD|PCMPGTW|PCMPGTB|PCMPEQD|PCMPEQW|PCMPEQB|PMADDWD|PMULLW|PMULHW|PSUBUSW|PSUBUSB|PSUBSW|PSUBSB|PSUBD|PSUBW|PSUBB|PADDUSW|PADDUSB|PADDSW|PADDSB|PADDD|PADDW|PADDB|PUNPCKLDQ|PUNPCKLWD|PUNPCKLBW|PUNPCKHDQ|PUNPCKHWD|PUNPCKHBW|PACKUSWB|PACKSSDW|PACKSSWB|MOVQ|MOVD|FXRSTOR|FXSAVE|FUCOMIP|FCOMIP|FUCOMI|FCOMI|FCMOVNU|FCMOVU|FCMOVNBE|FCMOVNB|FCMOVBE|FCMOVB|FCMOVNE|FCMOVE|FYL2XP1|FYL2X|FXTRACT|FXCH|FXAM|FWAIT|FUCOMPP|FUCOMP|FUCOM|FTST|FSUBRP|FSUBR|FSUBP|FSUB|FNSTSW|FSTSW|FSTP|FNSTENV|FSTENV|FNSTCW|FSTCW|FST|FSQRT|FSINCOS|FSIN|FSETPM|FSCALE|FNSAVE|FSAVE|FRSTOR|FRNDINT|FPTAN|FPREM1|FPREM|FPATAN|FNOP|FMULP|FMUL|FLD1|FLDZ|FLDPI|FLDL2T|FLDL2E|FLDLN2|FLDLG2|FLDENV|FLDCW|FLD|FISUBR|FISUB|FISTP|FIST|FNINIT|FINIT|FINCSTP|FIMUL|FILD|FIDIVR|FIDIV|FICOMP|FICOM|FIADD|FFREE|FNENI|FENI|FDIVRP|FDIVR|FDIVP|FDIV|FNDISI|FDISI|FDECSTP|FCOS|FCOMPP|FCOMP|FCOM|FNCLEX|FCLEX|FCHS|FBSTP|FBLD|FADDP|FADD|FABS|F2XM1|XADD|WBINVD|INVLPG|INVD|CMPXCHG|BSWAP|STOSD|SHRD|SHLD|SCASD|PUSHFD|PUSHD|PUSHAD|POPFD|POPAD|OUTSD|MOVZX|MOVSX|MOVSD|LSS|LOOPZD|LOOPNZD|LOOPNED|LOOPED|LOOPD|LODSD|LGS|LFS|JECXZ|IRETF|IRETDF|IRETD|INSD|CWDE|CMPSD|CDQ|BTS|BTR|BTC|BT|BSR|BSF|LTR|LMSW|LLDT|LIDT|LGDT|CLTS|VERW|VERR|STR|SMSW|SLDT|SIDT|SGDT|LSL|LAR|ARPL|PUSHW|PUSHA|POPA|OUTSW|OUTSB|OUTS|LEAVE|INSW|INSB|INS|ENTER|BOUND|XOR|XLATB|XLAT|XCHG|WAIT|TEST|SUB|STOSW|STOSB|STOS|STI|STD|STC|SHR|SHL|SCASW|SCASB|SCAS|SBB|SAR|SAL|SAHF|ROR|ROL|RETN|RETF|RET|RCR|RCL|PUSHF|PUSH|POPF|POP|OUT|OR|NOT|NOP|NEG|MUL|MOVSW|MOVSB|MOVS|MOV|LOOPZW|LOOPZ|LOOPW|LOOPNZW|LOOPNZ|LOOPNEW|LOOPNE|LOOPEW|LOOPE|LOOP|LODSW|LODSB|LODS|LES|LEA|LDS|LAHF|JMP|JCXZ|IRET|INTO|INT|INC|IN|IMUL|IDIV|HLT|ESC|DIV|DEC|DAS|DAA|CWD|CMPSW|CMPSB|CMPS|CMP|CMC|CLI|CLD|CLC|CBW|CALL|AND|ADD|ADC|AAS|AAM|AAD|AAA|REPZ|REPNZ|REPNE|REPE|REP|LOCK)(?![a-z|0-9])/i,
        sol: true,
        token: "builtin",
      },
      {
        regex: /(\s+)(SYSEXIT|SYSENTER|RDTSC|RDPMC|WRMSR|RDMSR|RSM|UD2|CPUID|CMPXCHG8B|VZEROUPPER|VZEROALL|VPERM2F128|VPERMILPD|VPERMILPS|VMASKMOVPD|VMASKMOVPS|VEXTRACTF128|VINSERTF128|VBROADCASTF128|VBROADCASTSD|VBROADCASTSS|PCLMULQDQ|AESIMC|AESKEYGENASSIST|AESDECLAST|AESDEC|AESENCLAST|AESENC|LZCNT|POPCNT|CRC32|PCMPGTQ|PCMPISTRM|PCMPISTRI|PCMPESTRM|PCMPESTRI|MOVNTDQA|PACKUSDW|PCMPEQQ|PTEST|PMOVZXDQ|PMOVSXDQ|PMOVZXWQ|PMOVSXWQ|PMOVZXWD|PMOVSXWD|PMOVZXBQ|PMOVSXBQ|PMOVZXBD|PMOVSXBD|PMOVZXBW|PMOVSXBW|PEXTRQ|PEXTRD|PEXTRB|EXTRACTPS|PINSRQ|PINSRD|PINSRB|INSERTPS|ROUNDSD|ROUNDPD|ROUNDSS|ROUNDPS|PMAXUD|PMINUD|PMAXUW|PMINUW|PMAXSD|PMINSD|PMAXSB|PMINSB|PBLENDW|PBLENDVB|BLENDVPD|BLENDVPS|BLENDPD|BLENDPS|DPPD|DPPS|PMULLD|PMULDQ|PHMINPOSUW|MPSADBW|PHADDSW|PHADDD|PHADDW|PHSUBSW|PHSUBD|PHSUBW|PMADDUBSW|PMULHRSW|PSHUFB|PALIGNR|PABSD|PABSW|PABSB|PSIGND|PSIGNW|PSIGNB|MWAIT|MONITOR|MOVDDUP|MOVSLDUP|MOVSHDUP|HSUBPD|HADDPD|HSUBPS|HADDPS|ADDSUBPD|ADDSUBPS|LDDQU|FISTTP|MOVNTI|MOVNTDQ|MOVNTPD|MASKMOVDQU|PAUSE|MFENCE|LFENCE|CLFLUSH|PUNPCKLQDQ|PUNPCKHQDQ|PSRLDQ|PSLLDQ|PSHUFD|PSHUFHW|PSHUFLW|PSUBQ|PADDQ|PMULUDQ|MOVDQ2Q|MOVQ2DQ|MOVDQU|MOVDQA|CVTTPS2DQ|CVTPS2DQ|CVTDQ2PS|CVTSI2SD|CVTTSD2SI|CVTSD2SI|CVTSD2SS|CVTSS2SD|CVTPD2PS|CVTPS2PD|CVTDQ2PD|CVTTPD2DQ|CVTPD2DQ|CVTPI2PD|CVTTPD2PI|CVTPD2PI|UNPCKLPD|UNPCKHPD|SHUFPD|UCOMISD|COMISD|CMPSD|CMPPD|XORPD|ORPD|ANDNPD|ANDPD|MINSD|MINPD|MAXSD|MAXPD|SQRTSD|SQRTPD|DIVSD|DIVPD|MULSD|MULPD|SUBSD|SUBPD|ADDSD|ADDPD|MOVSD|MOVMSKPD|MOVLPD|MOVHPD|MOVUPD|MOVAPD|PREFETCHNTA|PREFETCHT2|PREFETCHT1|PREFETCHT0|SFENCE|MOVNTPS|MOVNTQ|MASKMOVQ|PSHUFW|PSADBW|PMULHUW|PMOVMSKB|PMINSW|PMINUB|PMAXSW|PMAXUB|PINSRW|PEXTRW|PAVGW|PAVGB|STMXCSR|LDMXCSR|CVTTSS2SI|CVTSS2SI|CVTTPS2PI|CVTPS2PI|CVTSI2SS|CVTPI2PS|UNPCKLPS|UNPCKHPS|SHUFPS|XORPS|ORPS|ANDNPS|ANDPS|UCOMISS|COMISS|CMPSS|CMPPS|MINSS|MINPS|MAXSS|MAXPS|RSQRTSS|RSQRTPS|SQRTSS|SQRTPS|RCPSS|RCPPS|DIVSS|DIVPS|MULSS|MULPS|SUBSS|SUBPS|ADDSS|ADDPS|MOVSS|MOVMSKPS|MOVLHPS|MOVLPS|MOVHLPS|MOVHPS|MOVUPS|MOVAPS|EMMS|PSRAD|PSRAW|PSRLQ|PSRLD|PSRLW|PSLLQ|PSLLD|PSLLW|PXOR|POR|PANDN|PAND|PCMPGTD|PCMPGTW|PCMPGTB|PCMPEQD|PCMPEQW|PCMPEQB|PMADDWD|PMULLW|PMULHW|PSUBUSW|PSUBUSB|PSUBSW|PSUBSB|PSUBD|PSUBW|PSUBB|PADDUSW|PADDUSB|PADDSW|PADDSB|PADDD|PADDW|PADDB|PUNPCKLDQ|PUNPCKLWD|PUNPCKLBW|PUNPCKHDQ|PUNPCKHWD|PUNPCKHBW|PACKUSWB|PACKSSDW|PACKSSWB|MOVQ|MOVD|FXRSTOR|FXSAVE|FUCOMIP|FCOMIP|FUCOMI|FCOMI|FCMOVNU|FCMOVU|FCMOVNBE|FCMOVNB|FCMOVBE|FCMOVB|FCMOVNE|FCMOVE|FYL2XP1|FYL2X|FXTRACT|FXCH|FXAM|FWAIT|FUCOMPP|FUCOMP|FUCOM|FTST|FSUBRP|FSUBR|FSUBP|FSUB|FNSTSW|FSTSW|FSTP|FNSTENV|FSTENV|FNSTCW|FSTCW|FST|FSQRT|FSINCOS|FSIN|FSETPM|FSCALE|FNSAVE|FSAVE|FRSTOR|FRNDINT|FPTAN|FPREM1|FPREM|FPATAN|FNOP|FMULP|FMUL|FLD1|FLDZ|FLDPI|FLDL2T|FLDL2E|FLDLN2|FLDLG2|FLDENV|FLDCW|FLD|FISUBR|FISUB|FISTP|FIST|FNINIT|FINIT|FINCSTP|FIMUL|FILD|FIDIVR|FIDIV|FICOMP|FICOM|FIADD|FFREE|FNENI|FENI|FDIVRP|FDIVR|FDIVP|FDIV|FNDISI|FDISI|FDECSTP|FCOS|FCOMPP|FCOMP|FCOM|FNCLEX|FCLEX|FCHS|FBSTP|FBLD|FADDP|FADD|FABS|F2XM1|XADD|WBINVD|INVLPG|INVD|CMPXCHG|BSWAP|STOSD|SHRD|SHLD|SCASD|PUSHFD|PUSHD|PUSHAD|POPFD|POPAD|OUTSD|MOVZX|MOVSX|MOVSD|LSS|LOOPZD|LOOPNZD|LOOPNED|LOOPED|LOOPD|LODSD|LGS|LFS|JECXZ|IRETF|IRETDF|IRETD|INSD|CWDE|CMPSD|CDQ|BTS|BTR|BTC|BT|BSR|BSF|LTR|LMSW|LLDT|LIDT|LGDT|CLTS|VERW|VERR|STR|SMSW|SLDT|SIDT|SGDT|LSL|LAR|ARPL|PUSHW|PUSHA|POPA|OUTSW|OUTSB|OUTS|LEAVE|INSW|INSB|INS|ENTER|BOUND|XOR|XLATB|XLAT|XCHG|WAIT|TEST|SUB|STOSW|STOSB|STOS|STI|STD|STC|SHR|SHL|SCASW|SCASB|SCAS|SBB|SAR|SAL|SAHF|ROR|ROL|RETN|RETF|RET|RCR|RCL|PUSHF|PUSH|POPF|POP|OUT|OR|NOT|NOP|NEG|MUL|MOVSW|MOVSB|MOVS|MOV|LOOPZW|LOOPZ|LOOPW|LOOPNZW|LOOPNZ|LOOPNEW|LOOPNE|LOOPEW|LOOPE|LOOP|LODSW|LODSB|LODS|LES|LEA|LDS|LAHF|JMP|JCXZ|IRET|INTO|INT|INC|IN|IMUL|IDIV|HLT|ESC|DIV|DEC|DAS|DAA|CWD|CMPSW|CMPSB|CMPS|CMP|CMC|CLI|CLD|CLC|CBW|CALL|AND|ADD|ADC|AAS|AAM|AAD|AAA|REPZ|REPNZ|REPNE|REPE|REP|LOCK)(?![a-z|0-9])/i,
        token: "builtin",
      },

      //{ regex: /\/(?:[^\\]|\\.)*?\//, token: "variable-3" },
      // A next property will cause the mode to move to a different state
      { regex: /\s*?COMMENT\s*?\@/i, token: "comment", next: "commentAt" },
      {
        regex: /\s*?COMMENT\s*?\!/i,
        token: "comment",
        next: "commentExclamation",
      },
      //{ regex: /[-+\/*=<>!]+/, token: "operator" },
      // indent and dedent properties guide autoindentation
      //{ regex: /[\{\[\(]/, indent: true },
      //{ regex: /[\}\]\)]/, dedent: true },
      //{ regex: /[@a-z_$?][@a-z0-9_$?<>]*/, token: "variable" },
      // You can embed other modes with the mode property. This rule
      // causes all code between << and >> to be highlighted with the XML
      // mode.
      //{ regex: /<</, token: "meta", mode: { spec: "xml", end: />>/ } },
    ],
    // The multi-line comment state. Broken even in template
    commentAt: [
      { regex: /.*?\@/, token: "comment", next: "start" },
      { regex: /.*/, token: "comment", next: "commentAt" },
    ],

    commentExclamation: [
      { regex: /.*?\!/, token: "comment", next: "start" },
      { regex: /.*/, token: "comment", next: "commentExclamation" },
    ],
    // The meta property contains global information about the mode. It
    // can contain properties like lineComment, which are supported by
    // all modes, and also directives like dontIndentStates, which are
    // specific to simple modes.
    meta: {
      dontIndentStates: ["comment"],
      lineComment: ";",
    },
  });
});
